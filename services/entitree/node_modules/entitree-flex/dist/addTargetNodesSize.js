"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTargetNodesSize = void 0;
var getFromMap_1 = require("./getFromMap");
var addTargetNodesSize = function (nodes, settings, map) {
    nodes.forEach(function (node, index) {
        var siblings = map
            ? getFromMap_1.getFromMap(node[settings.siblingsAccessor], map)
            : node[settings.siblingsAccessor];
        siblings === null || siblings === void 0 ? void 0 : siblings.forEach(function (sibling) {
            sibling.width = sibling.width || settings.nodeWidth;
            sibling.height = sibling.height || settings.nodeHeight;
            sibling.marginRight = settings.siblingSpacing; //todo: check
            sibling.marginBottom = settings.verticalSpacing;
        });
        var partners = map
            ? getFromMap_1.getFromMap(node[settings.partnersAccessor], map)
            : node[settings.partnersAccessor];
        partners === null || partners === void 0 ? void 0 : partners.forEach(function (partner, partnerIndex) {
            partner.width = partner.width || settings.nodeWidth;
            partner.height = partner.height || settings.nodeHeight;
            if (partnerIndex === partners.length - 1)
                partner.marginRight = settings.cousinSpacing;
            else
                partner.marginRight = settings.siblingSpacing;
            partner.marginBottom = settings.verticalSpacing;
        });
        node.width = node.width || settings.nodeWidth;
        node.height = node.height || settings.nodeHeight;
        if (index === nodes.length - 1 && (!partners || !partners.length))
            node.marginRight = settings.cousinSpacing;
        else
            node.marginRight = settings.siblingSpacing;
        node.marginBottom = settings.verticalSpacing;
    });
};
exports.addTargetNodesSize = addTargetNodesSize;
//# sourceMappingURL=addTargetNodesSize.js.map