"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addGenerationSizes = void 0;
var getFromMap_1 = require("./getFromMap");
var addGenerationSizes = function (nodes, settings, map) {
    nodes.forEach(function (node, index) {
        var siblings = map
            ? getFromMap_1.getFromMap(node[settings.nextBeforeAccessor], map)
            : node[settings.nextBeforeAccessor];
        siblings === null || siblings === void 0 ? void 0 : siblings.forEach(function (sibling) {
            sibling.width = sibling.width || settings.nodeWidth;
            sibling.height = sibling.height || settings.nodeHeight;
            sibling.marginRight = settings.nextBeforeSpacing;
            sibling.marginBottom = settings.sourceTargetSpacing;
        });
        var partners = map
            ? getFromMap_1.getFromMap(node[settings.nextAfterAccessor], map)
            : node[settings.nextAfterAccessor];
        partners === null || partners === void 0 ? void 0 : partners.forEach(function (partner, partnerIndex) {
            partner.width = partner.width || settings.nodeWidth;
            partner.height = partner.height || settings.nodeHeight;
            if (partnerIndex === partners.length - 1) {
                //secondDegreeSpacing because you want more space between the last spouse and the next child, so the don't get confused as both children
                partner.marginRight = settings.secondDegreeSpacing;
            }
            else
                partner.marginRight = settings.nextAfterSpacing;
            partner.marginBottom = settings.sourceTargetSpacing;
        });
        node.width = node.width || settings.nodeWidth;
        node.height = node.height || settings.nodeHeight;
        if (partners && partners.length) {
            node.marginRight = settings.nextAfterSpacing; //for sure there is an after node
        }
        else {
            if (index === nodes.length - 1) {
                node.marginRight = settings.secondDegreeSpacing; // there is a cousin next
            }
            else {
                node.marginRight = settings.firstDegreeSpacing; //there is sibling next
            }
        }
        node.marginBottom = settings.sourceTargetSpacing;
    });
};
exports.addGenerationSizes = addGenerationSizes;
//# sourceMappingURL=addGenerationSizes.js.map