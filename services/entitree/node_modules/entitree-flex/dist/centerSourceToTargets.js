"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.centerSourceToTargets = void 0;
var getFromMap_1 = require("./getFromMap");
var last_1 = require("./last");
var centerSourceToTargets = function (source, targets, settings, map) {
    if (!source.isRoot) {
        //center only on actual children, not all generational nodes
        var firstTarget = targets[0];
        var lastTarget = last_1.last(targets);
        if (firstTarget && lastTarget) {
            if (settings.orientation === "vertical") {
                var newSourceX = (firstTarget.x + lastTarget.x + lastTarget.width) / 2 -
                    source.width / 2;
                var delta_1 = newSourceX - source.x;
                if (newSourceX !== source.x) {
                    source.x += delta_1;
                    var siblings = getFromMap_1.getFromMap(source[settings.nextBeforeAccessor], map);
                    siblings === null || siblings === void 0 ? void 0 : siblings.forEach(function (sibling) { return (sibling.x += delta_1); });
                    var partners = getFromMap_1.getFromMap(source[settings.nextAfterAccessor], map);
                    partners === null || partners === void 0 ? void 0 : partners.forEach(function (partner) { return (partner.x += delta_1); });
                }
            }
            else {
                var newSourceY = (firstTarget.y + lastTarget.y + lastTarget.height) / 2 -
                    source.height / 2;
                var delta_2 = newSourceY - source.y;
                if (newSourceY !== source.y) {
                    source.y += delta_2;
                    var siblings = getFromMap_1.getFromMap(source[settings.nextBeforeAccessor], map);
                    siblings === null || siblings === void 0 ? void 0 : siblings.forEach(function (sibling) { return (sibling.y += delta_2); });
                    var partners = getFromMap_1.getFromMap(source[settings.nextAfterAccessor], map);
                    partners === null || partners === void 0 ? void 0 : partners.forEach(function (partner) { return (partner.y += delta_2); });
                }
            }
        }
    }
};
exports.centerSourceToTargets = centerSourceToTargets;
//# sourceMappingURL=centerSourceToTargets.js.map