"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLevelNodesSizes = void 0;
var getFromMap_1 = require("./getFromMap");
var addLevelNodesSizes = function (levelNodes, settings, map) {
    levelNodes.forEach(function (node, index) {
        node.width = node.width || settings.nodeWidth;
        node.height = node.height || settings.nodeHeight;
        if (settings.orientation === "vertical") {
            node.marginBottom = settings.sourceTargetSpacing;
        }
        else {
            node.marginRight = settings.sourceTargetSpacing;
        }
        //initial values
        node.groupMaxHeight = node.height;
        node.groupMaxWidth = node.width;
        var siblings = getFromMap_1.getFromMap(node[settings.nextBeforeAccessor], map);
        siblings === null || siblings === void 0 ? void 0 : siblings.forEach(function (sibling) {
            sibling.width = sibling.width || settings.nodeWidth;
            sibling.height = sibling.height || settings.nodeHeight;
            if (settings.orientation === "vertical") {
                sibling.marginRight = settings.nextBeforeSpacing;
                sibling.marginBottom = settings.sourceTargetSpacing;
            }
            else {
                sibling.marginBottom = settings.nextBeforeSpacing;
                sibling.marginRight = settings.sourceTargetSpacing;
            }
            //check maxes
            node.groupMaxHeight = Math.max(node.groupMaxHeight, sibling.height);
            node.groupMaxWidth = Math.max(node.groupMaxWidth, sibling.width);
        });
        var spouses = getFromMap_1.getFromMap(node[settings.nextAfterAccessor], map);
        spouses === null || spouses === void 0 ? void 0 : spouses.forEach(function (spouse, spouseIndex) {
            spouse.width = spouse.width || settings.nodeWidth;
            spouse.height = spouse.height || settings.nodeHeight;
            if (spouseIndex === spouses.length - 1) {
                // secondDegreeSpacing because you want more space between the last spouse and the next child
                // so they don't get confused as being both children
                if (settings.orientation === "vertical") {
                    spouse.marginRight = settings.secondDegreeSpacing;
                }
                else {
                    spouse.marginBottom = settings.secondDegreeSpacing;
                }
            }
            else {
                if (settings.orientation === "vertical") {
                    spouse.marginRight = settings.nextAfterSpacing;
                }
                else {
                    spouse.marginBottom = settings.nextAfterSpacing;
                }
            }
            if (settings.orientation === "vertical") {
                spouse.marginBottom = settings.sourceTargetSpacing;
            }
            else {
                spouse.marginRight = settings.sourceTargetSpacing;
            }
            node.groupMaxHeight = Math.max(node.groupMaxHeight, spouse.height);
            node.groupMaxWidth = Math.max(node.groupMaxWidth, spouse.width);
        });
        if (spouses && spouses.length) {
            //for sure there is an after node
            if (settings.orientation === "vertical") {
                node.marginRight = settings.nextAfterSpacing;
            }
            else {
                node.marginBottom = settings.nextAfterSpacing;
            }
        }
        else {
            if (index === levelNodes.length - 1) {
                // there is a cousin next
                if (settings.orientation === "vertical") {
                    node.marginRight = settings.secondDegreeSpacing;
                }
                else {
                    node.marginBottom = settings.secondDegreeSpacing;
                }
            }
            else {
                //there is sibling next
                if (settings.orientation === "vertical") {
                    node.marginRight = settings.firstDegreeSpacing;
                }
                else {
                    node.marginBottom = settings.firstDegreeSpacing;
                }
            }
        }
    });
};
exports.addLevelNodesSizes = addLevelNodesSizes;
//# sourceMappingURL=addLevelNodesSizes.js.map