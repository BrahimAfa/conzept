"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getElements = void 0;
var getFromMap_1 = require("./getFromMap");
var getElements = function (root, settings, map) {
    var nodes = [root];
    var rels = [];
    var maxRight = root.x + root.width;
    var maxLeft = root.x;
    var maxBottom = root.y + root.height;
    var maxTop = root.y;
    function compare(node) {
        maxRight = Math.max(maxRight, node.x + node.width);
        maxLeft = Math.min(maxLeft, node.x);
        maxBottom = Math.max(maxBottom, node.y + node.height);
        maxTop = Math.min(maxTop, node.y);
    }
    function processNextBefores(subtree) {
        var nextBefores = getFromMap_1.getFromMap(subtree[settings.nextBeforeAccessor], map);
        nextBefores === null || nextBefores === void 0 ? void 0 : nextBefores.forEach(function (sibling) {
            compare(sibling);
            nodes.push(sibling);
            rels.push({ source: subtree, target: sibling });
        });
    }
    function processNextAfters(subtree) {
        var nextAfters = getFromMap_1.getFromMap(subtree[settings.nextAfterAccessor], map);
        nextAfters === null || nextAfters === void 0 ? void 0 : nextAfters.forEach(function (spouse) {
            compare(spouse);
            nodes.push(spouse);
            rels.push({ source: subtree, target: spouse });
        });
    }
    drill(root);
    function drill(subtree, direction) {
        processNextBefores(subtree);
        processNextAfters(subtree);
        if (!direction || direction === "parents") {
            var parents = getFromMap_1.getFromMap(subtree[settings.sourcesAccessor], map);
            parents === null || parents === void 0 ? void 0 : parents.forEach(function (parent) {
                compare(parent);
                nodes.push(parent);
                rels.push({ source: subtree, target: parent });
                drill(parent, "parents");
            });
        }
        if (!direction || direction === "children") {
            var children = getFromMap_1.getFromMap(subtree[settings.targetsAccessor], map);
            children === null || children === void 0 ? void 0 : children.forEach(function (child) {
                compare(child);
                nodes.push(child);
                rels.push({ source: subtree, target: child });
                drill(child, "children");
            });
        }
    }
    return {
        map: map,
        nodes: nodes,
        rels: rels,
        maxRight: maxRight,
        maxLeft: maxLeft,
        maxBottom: maxBottom,
        maxTop: maxTop,
    };
};
exports.getElements = getElements;
//# sourceMappingURL=getElements.js.map