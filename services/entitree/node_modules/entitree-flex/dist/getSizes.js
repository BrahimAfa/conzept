"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSizes = void 0;
var defaultSettings_1 = require("./defaultSettings");
var getFromMap_1 = require("./getFromMap");
var getSizes = function (rootId, map, customSettings) {
    if (customSettings === void 0) { customSettings = {}; }
    var settings = __assign(__assign({}, defaultSettings_1.defaultSettings), customSettings);
    var root = map[rootId];
    var maxRight = root.x + root.width;
    var maxLeft = root.x;
    var maxBottom = root.y + root.height;
    var maxTop = root.y;
    function compare(node) {
        maxRight = Math.max(maxRight, node.x + node.width);
        maxLeft = Math.max(maxLeft, node.x);
        maxBottom = Math.max(maxBottom, node.y + node.height);
        maxTop = Math.max(maxTop, node.y);
    }
    drill(root);
    function drill(subtree) {
        var siblings = getFromMap_1.getFromMap(subtree[settings.nextBeforeAccessor], map);
        siblings === null || siblings === void 0 ? void 0 : siblings.forEach(function (sibling) {
            compare(sibling);
        });
        var partners = getFromMap_1.getFromMap(subtree[settings.nextAfterAccessor], map);
        partners === null || partners === void 0 ? void 0 : partners.forEach(function (spouse) {
            compare(spouse);
        });
        var children = getFromMap_1.getFromMap(subtree[settings.targetsAccessor], map);
        children === null || children === void 0 ? void 0 : children.forEach(function (child) {
            compare(child);
            drill(child);
        });
        var parents = getFromMap_1.getFromMap(subtree[settings.sourcesAccessor], map);
        parents === null || parents === void 0 ? void 0 : parents.forEach(function (parent) {
            compare(parent);
            drill(parent);
        });
    }
    return {
        maxRight: maxRight,
        maxLeft: maxLeft,
        maxBottom: maxBottom,
        maxTop: maxTop,
    };
};
exports.getSizes = getSizes;
//# sourceMappingURL=getSizes.js.map