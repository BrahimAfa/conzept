"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkContourOverlap = void 0;
var getNodeBottomY_1 = require("./getNodeBottomY");
var getNodeRightX_1 = require("./getNodeRightX");
function checkContourOverlap(contourSet, node, settings) {
    contourSet.forEach(function (contourNode) {
        if (settings.orientation === "vertical") {
            var nodeBottomY = getNodeBottomY_1.getNodeBottomY(node);
            var contourRightX = getNodeRightX_1.getNodeRightX(contourNode);
            var contourTopY = contourNode.y;
            var contourBottomY = getNodeBottomY_1.getNodeBottomY(contourNode);
            var coversCountour = node.y <= contourTopY && nodeBottomY >= contourBottomY;
            var traspassHorizontal = node.x < contourRightX;
            // if (coversCountour) {
            //   //todo: if it covers the whole box, remove box from contour array
            // }
            if (traspassHorizontal &&
                ((node.y > contourTopY && node.y < contourBottomY) ||
                    (nodeBottomY > contourTopY && nodeBottomY < contourBottomY) ||
                    coversCountour)) {
                node.x += contourRightX - node.x;
            }
        }
        else {
            var nodeRightX = getNodeRightX_1.getNodeRightX(node);
            var contourBottomY = getNodeBottomY_1.getNodeBottomY(contourNode);
            var contourLeftX = contourNode.x;
            var contourRightX = getNodeRightX_1.getNodeRightX(contourNode);
            var coversCountour = node.x <= contourLeftX && nodeRightX >= contourRightX;
            var traspassVertical = node.y < contourBottomY;
            // if (coversCountour) {
            //   //todo: if it covers the whole box, remove box from contour array
            // }
            if (traspassVertical &&
                ((node.x > contourLeftX && node.x < contourRightX) ||
                    (nodeRightX > contourLeftX && nodeRightX < contourRightX) ||
                    coversCountour)) {
                node.y += contourBottomY - node.y;
            }
        }
    });
    contourSet.push(node);
}
exports.checkContourOverlap = checkContourOverlap;
//# sourceMappingURL=checkContourOverlap.js.map