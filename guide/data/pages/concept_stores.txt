====== concept stores ======

The idea of "concept stores" is to **allow any REST / SPARQL API to be added to Conzept**.

With these goals:
  * Make adding a new datasource as easy as possible, but still flexible in terms of the rendered output. (work in progress)
  * Make the API search results show up in the same style and results paging mechanics, as the other datasources. (working)
  * Let the topic results be augmented from Wikidata (if wanted). (working)
  * Have autocompletion work too (if wanted and possible). (working)
  * Make the web user be able to choose which datasources to use. (working)

[ Note: This sub-project follows from a Twitter discussion with [[https://twitter.com/kidehen/status/1482077334001885192|Kingsley Uyi Idehen]] ]

===== use cases =====

  * **Allow for adding extra "data sources" to a Conzept encyclopedia system**, so other concepts - beyond Wikipedia and Wikidata - can also be presented.

  * **Any organization that wants to use the Conzept user-interface for showing and augmenting their own knowledge base.**


==== status ====

  * The **[[datasources]]** system is now working, with these remaining issues:
    * bug: fix the [[https://t.co/TFjoJisZGG|wikidata-structured-query]] path (topics not showing in the sidebar)
    * todo: add back the raw-topic-card (needs checking to see the raw-query-string does not string-match any datasource results on the first page)
    * todo: indicate when there are "no results" for a search

  * Technical roadmap:
    * Research how to further **generalize the datasource integration**, using the common result-format used on Conzept (which is largely based on the Wikipedia API result structure)
    * Add hooks for pre- and post-processing of the API data.
    * Add hooks to enrich the API data (with Wikipedia and Wikidata information)
    * Test these ideas on real datasources.
    * Allow for datasource activation via an URL parameter (so these searches can be linked to) and store these in a cookie.
===== other tools =====

  * **Sparklis** (SPARQL-endpoint explorer)
    * [[https://github.com/sebferre/sparklis|git repo]]
    * [[http://www.irisa.fr/LIS/ferre/sparklis/examples.html|NLP query examples]]
    * sparql-endpoint testing: [[https://conze.pt/explore/?l=en&t=&s=true&query={%22conditions%22:[{%22propertyId%22:%22P5305%22,%22propertyDataType%22:%22url%22,%22propertyValueRelation%22:%22regardless-of-value%22,%22referenceRelation%22:%22regardless%22,%22value%22:%22%22,%22subclasses%22:false,%22conditionRelation%22:null,%22negate%22:false}],%22limit%22:10,%22useLimit%22:true,%22omitLabels%22:false}|query all endpoints]] (note: some endpoints are dead) -> then open "sparql explorer 2" in the main-section 
    * Handle HTTP GET/POST CORS issues with the SPARQL-endpoints (not sure POST is supported in the current Conzept proxy-service)
    * build steps [[https://github.com/sebferre/sparklis/issues/9#issuecomment-1018673156|here]]

  * **[[https://open-source.pages.logilab.fr/SemWeb/sparqlexplorer/?endpoint=https%253A%252F%252Fldf.fi%252Fmufi%252Fsparql|SparqlExplorer]]**
    * [[https://forge.extranet.logilab.fr/open-source/SemWeb/sparqlexplorer/|git repo]]

  * **[[https://conze.pt/app/query/|Wikidata Query Service]]** (self-hosted)
    * Could be used for federated SPARQL querying.

  * **[[https://sqid.toolforge.org/|SQID]]** (Not used on Conzept. This is a Wikidata-specific search/browse tool, based on the Wikidata SPARQL and REST API.)
    * [[https://sqid.toolforge.org/|git repo]]

