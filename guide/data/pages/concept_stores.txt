====== concept stores ======

Research how it would be possible to **allow 3rd-party SPARQL-based endpoints to be added as a new “concept store”** (besides Wikipedia and Wikidata).

[ Note: This research follows from a Twitter discussion with [[https://twitter.com/kidehen/status/1482077334001885192|Kingsley Uyi Idehen]] ]

Use cases:

  * An organization with a SPARQL-endpoint that wants to use the Conzept UI, to give people an integrated/customizable/augmented view of their knowledge base.

  * Allow for adding extra "concept stores" to a Conzept system, so other (more niche) concepts can be presented.

  * (more difficult probably) Allow a user to explore an unkown SPARQL-endpoint and render the results in Conzept and allow for full-text searches within that knowledge base (the latter may need more than a SPARQL end-point).

===== requirements =====

  * Add semantic metadata to each Conzept page (explore best practices)
    * test with the [[https://addons.mozilla.org/en-US/firefox/addon/openlink-structured-data-sniff/|OpenLink Structured Data Sniffer extension]]

  * Create a list of store-definitions containing:
    * Name
    * Description
    * Website
    * active (boolean)
    * SPARQL-endpoint URL
    * OpenSearch URL (for JSON, and XML?). See also: [[https://github.com/nsidc/OpenSearchlight|OpenSearchlight]].

  * Multi-query support for the autocomplete widget:
    * result merging

  * Multi-query support for the search-query results:
    * result merging
    * result ranking
    * result paging 

  * Integrate a SPARQL-explorer sub-system, like **[[https://conze.pt/app/sparklis/webapp/osparklis.html?title=%0A%09%09%20%20Core%20English%20DBpedia%0A%09%09&endpoint=https%3A//ldf.fi/mufi/sparql|Sparklis]]**
    * [[https://github.com/sebferre/sparklis|git repo]]
    * [[http://www.irisa.fr/LIS/ferre/sparklis/examples.html|NLP query examples]]
    * sparql-endpoint testing: [[https://conze.pt/explore/?l=en&t=&s=true&query={%22conditions%22:[{%22propertyId%22:%22P5305%22,%22propertyDataType%22:%22url%22,%22propertyValueRelation%22:%22regardless-of-value%22,%22referenceRelation%22:%22regardless%22,%22value%22:%22%22,%22subclasses%22:false,%22conditionRelation%22:null,%22negate%22:false}],%22limit%22:10,%22useLimit%22:true,%22omitLabels%22:false}|query all endpoints]] (note: some endpoints are dead) -> then open "sparql explorer 2" in the main-section 
    * Handle HTTP GET/POST CORS issues with the SPARQL-endpoints (not sure POST is supported in the current Conzept proxy-service)
    * build steps [[https://github.com/sebferre/sparklis/issues/9#issuecomment-1018673156|here]]

===== adapt conzept internals =====

  * Adapt internal data structures to allow for handling non-Wikidata entities.

  * Adapt field-definitions to allow for non-Wikidata property resolving

  * How to 'understand' the SPARQL-endpoint class graph and class properties?
    * Adapt topic classification code to allow for non-Wikidata classification rules.

  * Allow the Conzept type-system to handle non-Wikidata-Qid based entity IDs (eg. EntityDocument URLs)

  * How to page the results correctly, when combining them from multiple data sources?
    * get total results per data source
    * combine page-N results per data source
    * result ordering in pages
    * understand when to stop querying a data source
 
  * ...

===== other tools =====

  * **[[https://open-source.pages.logilab.fr/SemWeb/sparqlexplorer/?endpoint=https%253A%252F%252Fldf.fi%252Fmufi%252Fsparql|SparqlExplorer]]** (Not used on Conzept. I've been unable to build it from source yet, due to NPM package version dependency issues)
    * [[https://forge.extranet.logilab.fr/open-source/SemWeb/sparqlexplorer/|git repo]]

  * **[[https://conze.pt/app/query/|Wikidata Query Service]]** (self-hosted)
    * Could be used for federated SPARQL querying.

  * **[[https://sqid.toolforge.org/|SQID]]** (Not used on Conzept. This is a Wikidata-specific search/browse tool, based on the Wikidata SPARQL and REST API.)
    * [[https://sqid.toolforge.org/|git repo]]

